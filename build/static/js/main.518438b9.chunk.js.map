{"version":3,"sources":["lib/sapper.js","components/Tile.js","components/Board.js","components/Game.js","components/Sapper.js","index.js"],"names":["Tile","board","pos","this","bombed","explored","flagged","bombCount","neighbors","forEach","neighbor","adjacentBombCount","tile","explore","adjacentCoords","DELTAS","delta","newPos","onBoard","push","map","coord","grid","Board","gridSize","numBombs","generateBoard","plantBombs","i","j","totalPlantedBombs","row","Math","floor","random","col","plantBomb","lost","won","revealed","StyledTile","styled","div","props","css","handleClick","bind","getValue","e","preventDefault","rightClick","type","updateGame","gameOver","onContextMenu","onClick","reveal","Component","StyledBoard","gridrow","topIdx","idx","key","revealBoard","StyledGame","Modal","Game","state","Minesweeper","isModalOpen","status","checkGame","resetGame","openModal","toggleFlag","setState","className","Sapper","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.518438b9.chunk.js","sourcesContent":["export class Tile {\r\n    constructor(board, pos) {\r\n        this.board = board;\r\n        this.pos = pos;\r\n        this.bombed = false;\r\n        this.explored = false;\r\n        this.flagged = false;\r\n    }\r\n\r\n    adjacentBombCount() {\r\n        let bombCount = 0;\r\n        this.neighbors().forEach(neighbor => {\r\n            if (neighbor.bombed) {\r\n                bombCount++;\r\n            }\r\n        });\r\n        return bombCount;\r\n    }\r\n\r\n    explore() {\r\n        if (this.flagged || this.explored) {\r\n            return this;\r\n        }\r\n\r\n        this.explored = true;\r\n        if (!this.bombed && this.adjacentBombCount() === 0) {\r\n            this.neighbors().forEach(tile => {\r\n                tile.explore();\r\n            });\r\n        }\r\n    }\r\n\r\n    neighbors() {\r\n        const adjacentCoords = [];\r\n        Tile.DELTAS.forEach(delta => {\r\n            const newPos = [delta[0] + this.pos[0], delta[1] + this.pos[1]];\r\n            if (this.board.onBoard(newPos)) {\r\n                adjacentCoords.push(newPos);\r\n            }\r\n        });\r\n\r\n        return adjacentCoords.map(coord => this.board.grid[coord[0]][coord[1]]);\r\n    }\r\n\r\n    plantBomb() {\r\n        this.bombed = true;\r\n    }\r\n\r\n    toggleFlag() {\r\n        if (!this.explored) {\r\n            this.flagged = !this.flagged;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\nTile.DELTAS = [\r\n    [-1, -1],\r\n    [-1, 0],\r\n    [-1, 1],\r\n    [0, -1],\r\n    [0, 1],\r\n    [1, -1],\r\n    [1, 0],\r\n    [1, 1]\r\n];\r\n\r\nexport class Board {\r\n    constructor(gridSize, numBombs) {\r\n        this.gridSize = gridSize;\r\n        this.grid = [];\r\n        this.numBombs = numBombs;\r\n        this.generateBoard();\r\n        this.plantBombs();\r\n    }\r\n\r\n    generateBoard() {\r\n        for (let i = 0; i < this.gridSize; i++) {\r\n            this.grid.push([]);\r\n            for (let j = 0; j < this.gridSize; j++) {\r\n                const tile = new Tile(this, [i, j]);\r\n                this.grid[i].push(tile);\r\n            }\r\n        }\r\n    }\r\n\r\n    onBoard(pos) {\r\n        return (\r\n            pos[0] >= 0 &&\r\n            pos[0] < this.gridSize &&\r\n            pos[1] >= 0 &&\r\n            pos[1] < this.gridSize\r\n        );\r\n    }\r\n\r\n    plantBombs() {\r\n        let totalPlantedBombs = 0;\r\n        while (totalPlantedBombs < this.numBombs) {\r\n            const row = Math.floor(Math.random() * (this.gridSize - 1));\r\n            const col = Math.floor(Math.random() * (this.gridSize - 1));\r\n\r\n            let tile = this.grid[row][col];\r\n            if (!tile.bombed) {\r\n                tile.plantBomb();\r\n                totalPlantedBombs++;\r\n            }\r\n        }\r\n    }\r\n\r\n    lost() {\r\n        let lost = false;\r\n        this.grid.forEach(row => {\r\n            row.forEach(tile => {\r\n                if (tile.bombed && tile.explored) {\r\n                    lost = true;\r\n                }\r\n            });\r\n        });\r\n        return lost;\r\n    }\r\n\r\n    won() {\r\n        let won = true;\r\n        this.grid.forEach(row => {\r\n            row.forEach(tile => {\r\n                if (\r\n                    tile.flagged === tile.revealed ||\r\n                    tile.flagged !== tile.bombed\r\n                ) {\r\n                    won = false;\r\n                }\r\n            });\r\n        });\r\n        return won;\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst StyledTile = styled.div`\r\n    background: #507a90;\r\n    width: 45px;\r\n    height: 45px;\r\n    border-radius: 5px;\r\n    display: inline-flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-color: #507a90;\r\n    font-family: \"Arial\", sans-serif;\r\n    font-weight: 900;\r\n    color: #fff;\r\n    cursor: pointer;\r\n    transition: 100ms all ease-in;\r\n    ${props =>\r\n        props.explored &&\r\n        css`\r\n            border-color: none;\r\n            background: #024161;\r\n        `}\r\n`;\r\n\r\nclass Tile extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.getValue = this.getValue.bind(this);\r\n    }\r\n    handleClick(e) {\r\n        e.preventDefault();\r\n        let flagged = this.props.tile.flagged;\r\n        const rightClick = e.type === \"contextmenu\";\r\n        if (rightClick) flagged = !flagged;\r\n        this.props.updateGame(this.props.tile, flagged, rightClick);\r\n    }\r\n    getValue() {\r\n        if (this.props.gameOver) {\r\n            this.props.tile.explore();\r\n        }\r\n\r\n        if (!this.props.tile.explored) {\r\n            return this.props.tile.flagged ? \"🚩\" : null;\r\n        }\r\n\r\n        if (this.props.tile.bombed) {\r\n            return \"☢️\";\r\n        }\r\n\r\n        if (this.props.tile.adjacentBombCount() === 0) {\r\n            return null;\r\n        }\r\n\r\n        return this.props.tile.adjacentBombCount();\r\n    }\r\n    render() {\r\n        return (\r\n            <StyledTile\r\n                onContextMenu={this.handleClick}\r\n                onClick={this.handleClick}\r\n                explored={this.props.reveal}\r\n            >\r\n                {this.getValue()}\r\n            </StyledTile>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tile;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Tile from \"./Tile\";\r\n\r\nconst StyledBoard = styled.div`\r\n    background: #0f2949;\r\n    width: 500px;\r\n    height: 500px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    padding: 22px;\r\n    box-shadow: 4px 5px 20px 0px rgba(200, 200, 200, 1);\r\n    border-style: inset;\r\n    border-color: #507a90;\r\n    border-width: 5px;\r\n`;\r\n\r\nclass Board extends Component {\r\n    constructor(props) {\r\n        super();\r\n    }\r\n    render() {\r\n        return (\r\n            <StyledBoard>\r\n                {this.props.board.grid.map((gridrow, topIdx) => {\r\n                    return gridrow.map((tile, idx) => {\r\n                        return (\r\n                            <Tile\r\n                                key={idx}\r\n                                tile={tile}\r\n                                reveal={\r\n                                    tile.explored || this.props.revealBoard()\r\n                                }\r\n                                updateGame={this.props.updateGame}\r\n                                gameOver={this.props.revealBoard()}\r\n                            />\r\n                        );\r\n                    });\r\n                })}\r\n            </StyledBoard>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport * as Minesweeper from \"../lib/sapper\";\r\nimport Board from \"./Board\";\r\n\r\nconst StyledGame = styled.div`\r\n    h1 {\r\n        font-size: 24px;\r\n        color: #1a1a1a;\r\n        font-family: \"Arial\", sans-serif;\r\n        text-align: center;\r\n    }\r\n`;\r\n\r\nconst Modal = styled.div`\r\n    flex-wrap: wrap;\r\n    background: #0f2949;\r\n    color: #fff;\r\n    font-family: \"Arial\", sans-serif;\r\n    margin-bottom: 41px;\r\n    text-align: center;\r\n    padding: 22px;\r\n    transition: 300ms all ease-in;\r\n    h3 {\r\n        letter-spacing: 1px;\r\n        font-size: 2.5rem;\r\n        margin: 0;\r\n    }\r\n    div {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        background: #fff;\r\n        width: 50%;\r\n        height: 40%;\r\n    }\r\n    button {\r\n        background: red;\r\n        color: #fff;\r\n        border: none;\r\n        border-radius: 5px;\r\n        text-transform: uppercase;\r\n        font-size: 1.2rem;\r\n        font-weight: 900;\r\n        outline: none;\r\n        padding: 10px 15px;\r\n        margin: 20px auto 10px;\r\n        cursor: pointer;\r\n        display: none;\r\n        &.visible {\r\n            display: block;\r\n        }\r\n    }\r\n`;\r\n\r\nclass Game extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            board: new Minesweeper.Board(9, 9),\r\n            isModalOpen: false,\r\n            status: \"Try your luck!😁\"\r\n        };\r\n        this.updateGame = this.updateGame.bind(this);\r\n        this.checkGame = this.checkGame.bind(this);\r\n        this.resetGame = this.resetGame.bind(this);\r\n        this.openModal = this.openModal.bind(this);\r\n        this.revealBoard = this.revealBoard.bind(this);\r\n    }\r\n    updateGame(tile, flagged, rightClick) {\r\n        if (tile.explored) return null;\r\n        if (rightClick) tile.toggleFlag();\r\n        if (!flagged && !rightClick) tile.explore();\r\n        this.setState(() => ({\r\n            board: this.state.board\r\n        }));\r\n        this.checkGame();\r\n    }\r\n    checkGame() {\r\n        const lost = this.state.board.lost();\r\n        const won = this.state.board.won();\r\n\r\n        if (lost) {\r\n            this.openModal(\"You Lost.\");\r\n        }\r\n\r\n        if (won) {\r\n            this.openModal(\"You Win!\");\r\n        }\r\n    }\r\n    revealBoard() {\r\n        return this.state.board.lost() || this.state.board.won();\r\n    }\r\n    openModal(status) {\r\n        this.setState(() => ({\r\n            isModalOpen: true,\r\n            status\r\n        }));\r\n    }\r\n    resetGame() {\r\n        this.setState(() => ({\r\n            board: new Minesweeper.Board(9, 9),\r\n            status: \"Game in Progress\"\r\n        }));\r\n    }\r\n    render() {\r\n        return (\r\n            <StyledGame>\r\n                <Modal>\r\n                    <h3>{this.state.status}</h3>\r\n                    <button\r\n                        className={this.revealBoard() ? \"visible\" : \"\"}\r\n                        onClick={this.resetGame}\r\n                    >\r\n                        Restart\r\n                    </button>\r\n                </Modal>\r\n                <Board\r\n                    board={this.state.board}\r\n                    updateGame={this.updateGame}\r\n                    revealBoard={this.revealBoard}\r\n                />\r\n            </StyledGame>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from \"react\";\r\nimport Game from \"./Game\";\r\n\r\nclass Sapper extends Component {\r\n    render() {\r\n        return <Game />;\r\n    }\r\n}   \r\n\r\nexport default Sapper;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Sapper from \"./components/Sapper\";\r\n\r\nReactDOM.render(<Sapper />, document.getElementById(\"app\"));\r\n"],"sourceRoot":""}