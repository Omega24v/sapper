{"version":3,"sources":["minesweeper.js","components/Tile.js","components/Board.js","components/Game.js","components/Minesweeper.js","index.js"],"names":["Tile","board","pos","this","bombed","explored","flagged","bombCount","neighbors","forEach","neighbor","adjacentBombCount","tile","explore","adjacentCoords","DELTAS","delta","newPos","onBoard","push","map","coord","grid","Board","gridSize","numBombs","generateBoard","plantBombs","i","j","totalPlantedBombs","row","Math","floor","random","col","plantBomb","lost","won","revealed","StyledTile","styled","div","props","css","handleClick","bind","getValue","e","preventDefault","rightClick","type","updateGame","gameOver","onContextMenu","onClick","reveal","React","Component","StyledBoard","gridrow","topIdx","idx","key","revealBoard","StyledGame","Modal","Game","state","Minesweeper","isModalOpen","status","checkGame","resetGame","openModal","toggleFlag","setState","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b38d80c.chunk.js","sourcesContent":["// minesweeper library from AppAcademy\n\nexport class Tile {\n    constructor(board, pos) {\n        this.board = board;\n        this.pos = pos;\n        this.bombed = false;\n        this.explored = false;\n        this.flagged = false;\n    }\n\n    adjacentBombCount() {\n        let bombCount = 0;\n        this.neighbors().forEach(neighbor => {\n            if (neighbor.bombed) {\n                bombCount++;\n            }\n        });\n        return bombCount;\n    }\n\n    explore() {\n        if (this.flagged || this.explored) {\n            return this;\n        }\n\n        this.explored = true;\n        if (!this.bombed && this.adjacentBombCount() === 0) {\n            this.neighbors().forEach(tile => {\n                tile.explore();\n            });\n        }\n    }\n\n    neighbors() {\n        const adjacentCoords = [];\n        Tile.DELTAS.forEach(delta => {\n            const newPos = [delta[0] + this.pos[0], delta[1] + this.pos[1]];\n            if (this.board.onBoard(newPos)) {\n                adjacentCoords.push(newPos);\n            }\n        });\n\n        return adjacentCoords.map(coord => this.board.grid[coord[0]][coord[1]]);\n    }\n\n    plantBomb() {\n        this.bombed = true;\n    }\n\n    toggleFlag() {\n        if (!this.explored) {\n            this.flagged = !this.flagged;\n            return true;\n        }\n\n        return false;\n    }\n}\n\nTile.DELTAS = [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n    [0, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1]\n];\n\nexport class Board {\n    constructor(gridSize, numBombs) {\n        this.gridSize = gridSize;\n        this.grid = [];\n        this.numBombs = numBombs;\n        this.generateBoard();\n        this.plantBombs();\n    }\n\n    generateBoard() {\n        for (let i = 0; i < this.gridSize; i++) {\n            this.grid.push([]);\n            for (let j = 0; j < this.gridSize; j++) {\n                const tile = new Tile(this, [i, j]);\n                this.grid[i].push(tile);\n            }\n        }\n    }\n\n    onBoard(pos) {\n        return (\n            pos[0] >= 0 &&\n            pos[0] < this.gridSize &&\n            pos[1] >= 0 &&\n            pos[1] < this.gridSize\n        );\n    }\n\n    plantBombs() {\n        let totalPlantedBombs = 0;\n        while (totalPlantedBombs < this.numBombs) {\n            const row = Math.floor(Math.random() * (this.gridSize - 1));\n            const col = Math.floor(Math.random() * (this.gridSize - 1));\n\n            let tile = this.grid[row][col];\n            if (!tile.bombed) {\n                tile.plantBomb();\n                totalPlantedBombs++;\n            }\n        }\n    }\n\n    lost() {\n        let lost = false;\n        this.grid.forEach(row => {\n            row.forEach(tile => {\n                if (tile.bombed && tile.explored) {\n                    lost = true;\n                }\n            });\n        });\n        return lost;\n    }\n\n    won() {\n        let won = true;\n        this.grid.forEach(row => {\n            row.forEach(tile => {\n                if (\n                    tile.flagged === tile.revealed ||\n                    tile.flagged !== tile.bombed\n                ) {\n                    won = false;\n                }\n            });\n        });\n        return won;\n    }\n}\n","import React from \"react\";\nimport styled, { css } from \"styled-components\";\n\nconst StyledTile = styled.div`\n    background: #507a90;\n    width: 45px;\n    height: 45px;\n    border-radius: 5px;\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    border-style: inset;\n    border-color: #507a90;\n    font-family: \"Anton\", sans-serif;\n    font-weight: 900;\n    color: #fff;\n    cursor: pointer;\n    transition: 100ms all ease-in;\n    ${props =>\n        props.explored &&\n        css`\n            border-color: none;\n            background: #024161;\n        `}\n`;\n\nclass Tile extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n        this.getValue = this.getValue.bind(this);\n    }\n    handleClick(e) {\n        e.preventDefault();\n        let flagged = this.props.tile.flagged;\n        const rightClick = e.type === \"contextmenu\";\n        if (rightClick) flagged = !flagged;\n        this.props.updateGame(this.props.tile, flagged, rightClick);\n    }\n    getValue() {\n        if (this.props.gameOver) {\n            this.props.tile.explore();\n        }\n\n        if (!this.props.tile.explored) {\n            return this.props.tile.flagged ? \"ðŸš©\" : null;\n        }\n\n        if (this.props.tile.bombed) {\n            return \"ðŸ’£\";\n        }\n\n        if (this.props.tile.adjacentBombCount() === 0) {\n            return null;\n        }\n\n        return this.props.tile.adjacentBombCount();\n    }\n    render() {\n        return (\n            <StyledTile\n                onContextMenu={this.handleClick}\n                onClick={this.handleClick}\n                explored={this.props.reveal}\n            >\n                {this.getValue()}\n            </StyledTile>\n        );\n    }\n}\n\nexport default Tile;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Tile from \"./Tile\";\n\nconst StyledBoard = styled.div`\n    background: #0f2949;\n    width: 500px;\n    height: 500px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-wrap: wrap;\n    padding: 22px;\n    box-shadow: 4px 5px 20px 0px rgba(200, 200, 200, 1);\n    border-radius: 20px;\n    border-style: inset;\n    border-color: #507a90;\n    border-width: 5px;\n`;\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <StyledBoard>\n                {this.props.board.grid.map((gridrow, topIdx) => {\n                    return gridrow.map((tile, idx) => {\n                        return (\n                            <Tile\n                                key={idx}\n                                tile={tile}\n                                reveal={\n                                    tile.explored || this.props.revealBoard()\n                                }\n                                updateGame={this.props.updateGame}\n                                gameOver={this.props.revealBoard()}\n                            />\n                        );\n                    });\n                })}\n            </StyledBoard>\n        );\n    }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport * as Minesweeper from \"../minesweeper\";\nimport Board from \"./Board\";\n\nconst StyledGame = styled.div`\n    h1 {\n        font-size: 24px;\n        color: #1a1a1a;\n        font-family: \"Helvetica\", sans-serif;\n        text-align: center;\n    }\n`;\n\nconst Modal = styled.div`\n    flex-wrap: wrap;\n    background: #0f2949;\n    color: #fff;\n    font-family: \"Anton\", sans-serif;\n    border-radius: 10px;\n    margin-bottom: 41px;\n    text-align: center;\n    padding: 22px;\n    transition: 300ms all ease-in;\n    h3 {\n        letter-spacing: 1px;\n        font-size: 2.5rem;\n        margin: 0;\n    }\n    div {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        background: #fff;\n        width: 50%;\n        height: 40%;\n    }\n    button {\n        background: red;\n        color: #fff;\n        border: none;\n        border-radius: 5px;\n        text-transform: uppercase;\n        font-size: 1.2rem;\n        font-weight: 900;\n        outline: none;\n        padding: 10px 15px;\n        margin: 20px auto 10px;\n        cursor: pointer;\n        display: none;\n        &.visible {\n            display: block;\n        }\n    }\n`;\n\nclass Game extends Component {\n    constructor() {\n        super();\n        this.state = {\n            board: new Minesweeper.Board(9, 9),\n            isModalOpen: false,\n            status: \"Game in Progress\"\n        };\n        this.updateGame = this.updateGame.bind(this);\n        this.checkGame = this.checkGame.bind(this);\n        this.resetGame = this.resetGame.bind(this);\n        this.openModal = this.openModal.bind(this);\n        this.revealBoard = this.revealBoard.bind(this);\n    }\n    updateGame(tile, flagged, rightClick) {\n        if (tile.explored) return null;\n        if (rightClick) tile.toggleFlag();\n        if (!flagged && !rightClick) tile.explore();\n        this.setState(() => ({\n            board: this.state.board\n        }));\n        this.checkGame();\n    }\n    checkGame() {\n        const lost = this.state.board.lost();\n        const won = this.state.board.won();\n\n        if (lost) {\n            this.openModal(\"You Lost.\");\n        }\n\n        if (won) {\n            this.openModal(\"You Win!\");\n        }\n    }\n    revealBoard() {\n        return this.state.board.lost() || this.state.board.won();\n    }\n    openModal(status) {\n        this.setState(() => ({\n            isModalOpen: true,\n            status\n        }));\n    }\n    resetGame() {\n        this.setState(() => ({\n            board: new Minesweeper.Board(9, 9),\n            status: \"Game in Progress\"\n        }));\n    }\n    render() {\n        return (\n            <StyledGame>\n                <Modal>\n                    <h3>{this.state.status}</h3>\n                    <button\n                        className={this.revealBoard() ? \"visible\" : \"\"}\n                        onClick={this.resetGame}\n                    >\n                        Play Again\n                    </button>\n                </Modal>\n                <Board\n                    board={this.state.board}\n                    updateGame={this.updateGame}\n                    revealBoard={this.revealBoard}\n                />\n            </StyledGame>\n        );\n    }\n}\n\nexport default Game;\n","import React from \"react\";\nimport Game from \"./Game\";\n\nclass Minesweeper extends React.Component {\n    render() {\n        return <Game />;\n    }\n}\n\nexport default Minesweeper;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Minesweeper from \"./components/Minesweeper\";\n\nReactDOM.render(<Minesweeper />, document.getElementById(\"app\"));\n"],"sourceRoot":""}